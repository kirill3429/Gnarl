//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""f927afe6-1699-4ce7-8a97-912bbb69cfd1"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f28b31a6-da59-4fe3-8725-a725ce3a8df5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e4ad03d4-60db-4296-bd59-1b98776b2a6d"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b32a5441-fac6-46bf-badc-b1e698ebd58e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f0a2bc16-0781-48df-9884-f17686b9a597"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c62d8585-b3f7-4997-8cb1-682251e50570"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""deab93b5-16c5-43eb-9f74-633ae717d5fd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerMouse"",
            ""id"": ""9686a22f-34c6-4b97-814c-e4c2222aace2"",
            ""actions"": [
                {
                    ""name"": ""Mouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dcafa87e-7780-40ef-963d-1b21ecebc7b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""26f223e2-f145-40a8-affa-af0c5925d464"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""1cfbda15-85b7-4f87-8401-d247d00d962d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""e2a795dd-2a0e-485b-865f-7d5be8b6151f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""386e3264-d73f-454b-b179-f3055daed74f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0fe855a-3429-4c42-af4b-3cfdb77844cd"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a68d324f-06af-4c67-8924-bd1d639596ab"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a138545c-5dda-4f28-93fe-7ff174879ae7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerButtons"",
            ""id"": ""69681d8a-fa73-45f1-80bb-f03a20fff162"",
            ""actions"": [
                {
                    ""name"": ""EditorModeButton"",
                    ""type"": ""Button"",
                    ""id"": ""1d782d3a-1b68-4223-aa98-ce5a623cd70f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f58dfcbc-1909-4ba5-a77e-c55ff4918e60"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EditorModeButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        // PlayerMouse
        m_PlayerMouse = asset.FindActionMap("PlayerMouse", throwIfNotFound: true);
        m_PlayerMouse_Mouse = m_PlayerMouse.FindAction("Mouse", throwIfNotFound: true);
        m_PlayerMouse_Scroll = m_PlayerMouse.FindAction("Scroll", throwIfNotFound: true);
        m_PlayerMouse_MouseClick = m_PlayerMouse.FindAction("MouseClick", throwIfNotFound: true);
        m_PlayerMouse_RightMouseClick = m_PlayerMouse.FindAction("RightMouseClick", throwIfNotFound: true);
        // PlayerButtons
        m_PlayerButtons = asset.FindActionMap("PlayerButtons", throwIfNotFound: true);
        m_PlayerButtons_EditorModeButton = m_PlayerButtons.FindAction("EditorModeButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Movement;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerMouse
    private readonly InputActionMap m_PlayerMouse;
    private IPlayerMouseActions m_PlayerMouseActionsCallbackInterface;
    private readonly InputAction m_PlayerMouse_Mouse;
    private readonly InputAction m_PlayerMouse_Scroll;
    private readonly InputAction m_PlayerMouse_MouseClick;
    private readonly InputAction m_PlayerMouse_RightMouseClick;
    public struct PlayerMouseActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMouseActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse => m_Wrapper.m_PlayerMouse_Mouse;
        public InputAction @Scroll => m_Wrapper.m_PlayerMouse_Scroll;
        public InputAction @MouseClick => m_Wrapper.m_PlayerMouse_MouseClick;
        public InputAction @RightMouseClick => m_Wrapper.m_PlayerMouse_RightMouseClick;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMouseActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMouseActions instance)
        {
            if (m_Wrapper.m_PlayerMouseActionsCallbackInterface != null)
            {
                @Mouse.started -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnMouse;
                @Scroll.started -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnScroll;
                @Scroll.performed -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnScroll;
                @Scroll.canceled -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnScroll;
                @MouseClick.started -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnMouseClick;
                @MouseClick.performed -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnMouseClick;
                @MouseClick.canceled -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnMouseClick;
                @RightMouseClick.started -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnRightMouseClick;
                @RightMouseClick.performed -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnRightMouseClick;
                @RightMouseClick.canceled -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnRightMouseClick;
            }
            m_Wrapper.m_PlayerMouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
                @RightMouseClick.started += instance.OnRightMouseClick;
                @RightMouseClick.performed += instance.OnRightMouseClick;
                @RightMouseClick.canceled += instance.OnRightMouseClick;
            }
        }
    }
    public PlayerMouseActions @PlayerMouse => new PlayerMouseActions(this);

    // PlayerButtons
    private readonly InputActionMap m_PlayerButtons;
    private IPlayerButtonsActions m_PlayerButtonsActionsCallbackInterface;
    private readonly InputAction m_PlayerButtons_EditorModeButton;
    public struct PlayerButtonsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerButtonsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @EditorModeButton => m_Wrapper.m_PlayerButtons_EditorModeButton;
        public InputActionMap Get() { return m_Wrapper.m_PlayerButtons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerButtonsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerButtonsActions instance)
        {
            if (m_Wrapper.m_PlayerButtonsActionsCallbackInterface != null)
            {
                @EditorModeButton.started -= m_Wrapper.m_PlayerButtonsActionsCallbackInterface.OnEditorModeButton;
                @EditorModeButton.performed -= m_Wrapper.m_PlayerButtonsActionsCallbackInterface.OnEditorModeButton;
                @EditorModeButton.canceled -= m_Wrapper.m_PlayerButtonsActionsCallbackInterface.OnEditorModeButton;
            }
            m_Wrapper.m_PlayerButtonsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @EditorModeButton.started += instance.OnEditorModeButton;
                @EditorModeButton.performed += instance.OnEditorModeButton;
                @EditorModeButton.canceled += instance.OnEditorModeButton;
            }
        }
    }
    public PlayerButtonsActions @PlayerButtons => new PlayerButtonsActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerMouseActions
    {
        void OnMouse(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
        void OnMouseClick(InputAction.CallbackContext context);
        void OnRightMouseClick(InputAction.CallbackContext context);
    }
    public interface IPlayerButtonsActions
    {
        void OnEditorModeButton(InputAction.CallbackContext context);
    }
}
